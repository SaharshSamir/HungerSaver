generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  contact             String?
  dob                 DateTime?
  city                String?
  type                UserType             @default(DONATOR)
  donations           Donation[]
  accounts            Account[]
  sessions            Session[]
  VolunteerRequest    VolunteerRequest?
  placedOrders        Order[]              @relation("Order_PacedByUser")
  volunteeringOrders  Order[]              @relation("Order_VolunteeringByUser")
  // verificationReq       VerificationRequest? @relation("Order_VerificationByUser", fields: [verificationRequestId], references: [id])
  VerificationRequest VerificationRequest?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Donation {
  id       String   @id @default(cuid())
  name     String
  expiry   DateTime
  quantity Int
  city     String
  address  String
  contact  String
  foodType FoodType
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?
  Order    Order[]
}

//request to admin to become a volunteer
model VolunteerRequest {
  id           String    @id @default(cuid())
  name         String?
  contact      String?
  dob          DateTime?
  city         String?
  documennt    String?
  documentType String?
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique
}

//request to admin to order donations
model VerificationRequest {
  id        String  @id @default(cuid())
  documennt String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
}

model Order {
  id               String       @id @default(cuid())
  deliveryLocation String
  placedAt         DateTime
  placedBy         User         @relation(fields: [placedByUserId], references: [id], name: "Order_PacedByUser")
  donation         Donation     @relation(fields: [donationId], references: [id])
  volunteeringBy   User?        @relation(fields: [volunteerUserId], references: [id], name: "Order_VolunteeringByUser")
  status           OrderStatus
  placedByUserId   String
  volunteerUserId  String?
  donationId       String
  activeOrder      ActiveOrder?
}

model ActiveOrder {
  id      String  @id @default(cuid())
  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @unique
}

enum OrderStatus {
  SEARCHING
  FOUND
  OW_PICKUP
  AT_LOCATION
  OW_DROP
  DELIVERED
  CANCELED
}

enum UserType {
  DONATOR
  CLIENT
  VOLUNTEER
  ADMIN
}

enum FoodType {
  VEG
  NON_VEG
  JAIN
}
