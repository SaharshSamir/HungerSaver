generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  type             UserType          @default(DONATOR)
  donations        Donation[]
  accounts         Account[]
  sessions         Session[]
  VolunteerRequest VolunteerRequest?
  Order            Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Donation {
  id       String   @id @default(cuid())
  name     String
  expiry   DateTime
  quantity String
  address  String
  contact  String
  foodType FoodType
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?
  Order    Order[]
}

model VolunteerRequest {
  id        String  @id @default(cuid())
  documennt String?
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model Order {
  id               String      @id @default(cuid())
  deliveryLocation String
  placedAt         DateTime
  placedBy         User        @relation(fields: [userId], references: [id])
  donation         Donation    @relation(fields: [donationId], references: [id])
  status           OrderStatus
  userId           String      @unique
  donationId       String
}

enum OrderStatus {
  SEARCHING
  FOUND
  OW_PICKUP
  AT_LOCATION
  OW_DROP
  DELIVERED
  CANCELED
}

enum UserType {
  DONATOR
  VOLUNTEER
  ADMIN
}

enum FoodType {
  VEG
  NON_VEG
  JAIN
}
